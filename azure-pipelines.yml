# Python Django

# Test a Django project on multiple versions of Python.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/python

trigger:
- master

pool:
  vmImage: 'ubuntu-latest'

variables:
  ENGINE: 'django.db.backends.mysql'
  NAME: 'interviewaiDB'
  USER: 'anas'
  PASSWORD: 'admin@123'
  HOST: 'interview-ai-server.mysql.database.azure.com'
  PORT: '3306'
  WEBSERVER_PORT: '8000' # define the port the webserver will listen on

steps:
- task: UsePythonVersion@0
  inputs:
    versionSpec: '3.12.3'
    architecture: 'x64'

- script: |
    echo "ENGINE: $ENGINE"
    echo "NAME: $NAME"
    echo "USER: $USER"
    echo "PASSWORD: $PASSWORD"
    echo "HOST: $HOST"
    echo "PORT: $PORT"
  displayName: 'Display environment variables'
  env:
    ENGINE: $(ENGINE)
    NAME: $(NAME)
    USER: $(USER)
    PASSWORD: $(PASSWORD)
    HOST: $(HOST)
    PORT: $(PORT)

- task: PythonScript@0
  displayName: 'Export project path'
  inputs:
    scriptSource: 'inline'
    script: |
      """Search all subdirectories for `manage.py`."""
      from glob import iglob
      from os import path
      # Python >= 3.5
      manage_py = next(iglob(path.join('**', 'manage.py'), recursive=True), None)
      if not manage_py:
          raise SystemExit('Could not find a Django project')
      project_location = path.dirname(path.abspath(manage_py))
      print('Found Django project in', project_location)
      print('##vso[task.setvariable variable=projectRoot]{}'.format(project_location))

- script: |
    python -m pip install --upgrade pip setuptools wheel
    pip install -r requirements.txt
    pip install unittest-xml-reporting
  displayName: 'Install prerequisites'

- script: |
    pushd '$(projectRoot)'
    python manage.py test --testrunner xmlrunner.extra.djangotestrunner.XMLTestRunner --no-input
  displayName: 'Run tests'

- task: PublishTestResults@2
  inputs:
    testResultsFiles: "**/TEST-*.xml"
    testRunTitle: 'Python $(PYTHON_VERSION)'
  condition: succeededOrFailed()

- task: ArchiveFiles@2
  inputs:
    rootFolderOrFile: '$(Build.SourcesDirectory)/ai_interviewer'  # Path to your project
    includeRootFolder: false
    archiveType: 'zip'
    archiveFile: '$(Build.ArtifactStagingDirectory)/ai_interviewer.zip'  # Path to save the zip file
    replaceExistingArchive: true

- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)/ai_interviewer.zip'
    ArtifactName: 'ai_interviewer'

- task: DownloadBuildArtifacts@0
  inputs:
    buildType: 'current'
    downloadType: 'single'
    artifactName: 'ai_interviewer'
    downloadPath: '$(Pipeline.Workspace)'

- script: |
    unzip $(Pipeline.Workspace)/ai_interviewer/ai_interviewer.zip -d $(Pipeline.Workspace)/ai_interviewer
  displayName: 'Unzip Package'

- task: AzureWebApp@1
  inputs:
    azureSubscription: 'Azure subscription 1(d6ce5594-50b2-4ddb-b398-864c24bd72c4)'
    appType: 'webAppLinux'
    appName: 'interview-ai-webapp'
    package: '$(Pipeline.Workspace)/ai_interviewer/ai_interviewer.zip'
    runtimeStack: 'PYTHON|3.11'
    appSettings: '-ENGINE django.db.backends.mysql -NAME interviewaiDB -USER anas -PASSWORD admin@123 -HOST interview-ai-server.mysql.database.azure.com -PORT 3306 -WEBSERVER_PORT 8000'
